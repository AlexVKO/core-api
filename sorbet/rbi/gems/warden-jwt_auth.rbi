# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/warden-jwt_auth/all/warden-jwt_auth.rbi
#
# warden-jwt_auth-0.5.0

module Warden
end
module Warden::JWTAuth
  def constantize_values(hash); end
  def self.constantize_values(hash); end
  def self.symbolize_keys(hash); end
  def self.upcase_first_items(array); end
  def symbolize_keys(hash); end
  def upcase_first_items(array); end
  extend Dry::Configurable
  extend Dry::Configurable::ClassMethods
end
module Warden::JWTAuth::HeaderParser
  def self.from_env(env); end
  def self.to_env(env, token); end
  def self.to_headers(headers, token); end
end
module Warden::JWTAuth::PayloadUserHelper
  def self.aud_matches?(payload, aud); end
  def self.find_user(payload); end
  def self.payload_for_user(user, scope); end
  def self.scope_matches?(payload, scope); end
end
module Warden::JWTAuth::EnvHelper
  def self.aud_header(env); end
  def self.authorization_header(env); end
  def self.path_info(env); end
  def self.request_method(env); end
  def self.set_authorization_header(env, value); end
end
module Warden::JWTAuth::Errors
end
class Warden::JWTAuth::Errors::RevokedToken < JWT::DecodeError
end
class Warden::JWTAuth::Errors::NilUser < JWT::DecodeError
end
class Warden::JWTAuth::Errors::WrongScope < JWT::DecodeError
end
class Warden::JWTAuth::Errors::WrongAud < JWT::DecodeError
end
class Warden::JWTAuth::UserEncoder
  def call(user, scope, aud); end
  def helper; end
  def initialize; end
end
class Warden::JWTAuth::UserDecoder
  def call(token, scope, aud); end
  def check_valid_claims(payload, scope, aud); end
  def check_valid_user(payload, user, scope); end
  def helper; end
  def initialize(**args); end
  extend Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_64
  include Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_63
  include Anonymous_Dry_AutoInject_Strategies_Kwargs_65
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_63
  def initialize(**kwargs); end
  def revocation_strategies; end
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_64
  def new(*args, **kwargs); end
end
module Anonymous_Dry_AutoInject_Strategies_Kwargs_65
end
class Warden::JWTAuth::TokenEncoder
  def call(payload); end
  def merge_with_default_claims(payload); end
  extend Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_67
  include Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_66
  include Anonymous_Dry_AutoInject_Strategies_Kwargs_68
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_66
  def algorithm; end
  def expiration_time; end
  def initialize(**kwargs); end
  def secret; end
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_67
  def new(*args, **kwargs); end
end
module Anonymous_Dry_AutoInject_Strategies_Kwargs_68
end
class Warden::JWTAuth::TokenDecoder
  def call(token); end
  extend Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_70
  include Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_69
  include Anonymous_Dry_AutoInject_Strategies_Kwargs_71
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_69
  def algorithm; end
  def initialize(**kwargs); end
  def secret; end
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_70
  def new(*args, **kwargs); end
end
module Anonymous_Dry_AutoInject_Strategies_Kwargs_71
end
class Warden::JWTAuth::TokenRevoker
  def call(token); end
  extend Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_73
  include Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_72
  include Anonymous_Dry_AutoInject_Strategies_Kwargs_74
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_72
  def initialize(**kwargs); end
  def revocation_strategies; end
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_73
  def new(*args, **kwargs); end
end
module Anonymous_Dry_AutoInject_Strategies_Kwargs_74
end
class Warden::JWTAuth::Hooks
  def add_token_to_env(user, scope, env); end
  def jwt_scope?(scope); end
  def prepare_token(user, auth, opts); end
  def request_matches?(path_info, method); end
  def self.after_set_user(user, auth, opts); end
  def token_should_be_added?(scope, env); end
  extend Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_76
  include Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_75
  include Anonymous_Dry_AutoInject_Strategies_Kwargs_77
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_InstanceMethods_75
  def aud_header; end
  def dispatch_requests; end
  def initialize(**kwargs); end
  def mappings; end
end
module Anonymous_Dry_AutoInject_Strategies_Constructor_ClassMethods_76
  def new(*args, **kwargs); end
end
module Anonymous_Dry_AutoInject_Strategies_Kwargs_77
end
class Warden::JWTAuth::Strategy < Warden::Strategies::Base
  def authenticate!; end
  def store?; end
  def token; end
  def valid?; end
end
class Warden::JWTAuth::Middleware
  def app; end
  def call(env); end
  def initialize(app); end
end
class Warden::JWTAuth::Middleware::TokenDispatcher < Warden::JWTAuth::Middleware
  def app; end
  def call(env); end
  def headers_with_token(env, headers); end
  def initialize(app); end
end
class Warden::JWTAuth::Middleware::RevocationManager < Warden::JWTAuth::Middleware
  def app; end
  def call(env); end
  def config; end
  def helper; end
  def initialize(app); end
  def revoke_token(env); end
  def token_should_be_revoked?(path_info, method); end
end
module Warden::JWTAuth::Interfaces
end
class Warden::JWTAuth::Interfaces::UserRepository
  def find_for_jwt_authentication(_sub); end
end
class Warden::JWTAuth::Interfaces::User
  def jwt_payload; end
  def jwt_subject; end
  def on_jwt_dispatch(_token, _payload); end
end
class Warden::JWTAuth::Interfaces::RevocationStrategy
  def jwt_revoked?(_payload, _user); end
  def revoke_jwt(_payload, _user); end
end
